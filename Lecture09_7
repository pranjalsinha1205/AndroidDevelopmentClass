import java.util.Scanner

fun main(args: Array<String>) {
    println("Function without return type")
    sum(20,50) //should give 70
    sum() //should give 30
    addition(20,50) //should give 70
//    addition() we get errors for this as there is no default value given to the function
    println("-------------------------------------------")
    println("Function with return type")
    var result = sumTwoNums(10,20)
    println(result)
    println("-------------------------------------------")
    var sc = Scanner(System.`in`)
    print("Enter the temperature in Celsius: ")
    var c:Double = sc.nextDouble()
    var f = convertCToF(c)
    println("Celsius: $c, Fahrenheit: $f")
    print("Enter the temperature in Fahrenheit: ")
    f = sc.nextDouble()
    c = convertFtoC(f)
    println("Celsius: $c, Fahrenheit: $f")
    println("-------------------------------------------")
    println("Recursive Functions")
    print("Enter the number: ")
    var n = sc.nextInt()
    var fact = factorial(n)
    println("$n ! = $fact")
    println("\nFibonaaci Series")
    print("Enter the value for n: ")
    n = sc.nextInt()
    var fibo = 0
    println("Fibonacci series upto the term $n")
    for (i in 1..n){
        fibo = fib(i)
        println(fibo)
    }
    println("The term $n of the Fibonacci series is $fibo")
    println("-------------------------------------------")
    println("OOPs")
    //class is a blueprint for creating objects
    //declared using class keyword
    //kotlin class has a class header which specifies its type parameters, constructor etc.
    var student = Student()
    student.result()
}

fun sum(a:Int=10, b:Int=20){
    val c = a + b
    println(c)
}

fun addition(p:Int, q:Int){
    val r = p + q
    println(r)
}

//if a function doesn't return a useful values, its return type by default is referred to as Unit

fun sumTwoNums(a:Int, b:Int):Int{
    val x = a + b
    return x
}

//create a function to convert temp from celsius to fahrenheit
fun convertCToF(c:Double):Double{
    val f = c*9/5 + 32
    return f
}
//do vice versa as well
fun convertFtoC(f:Double):Double{
    val c = (f-32)*5/9
    return c
}
//factorial by recursion
fun factorial(n:Int):Int{
    if (n<0){
        println("Negative numbers don't have factorials")
        return -1
    }
    else if (n in 0..1){
        return 1
    }
    return n * factorial(n-1)
}
//fibonaaci series
fun fib(n:Int):Int{
    if (n<1){
        println("Numbers less than 1 not allowed")
        return -1
    }
    else if(n==1){
        return 0
    }
    else if(n==2){
        return 1
    }
    return fib(n-1) + fib(n-2)
}

class Student{
    fun result(){
        println("You are the topper")
    }
}
