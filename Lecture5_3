fun main(args:Array<String>) {
    //arrays, by definition, are the same in this as java    
    val numbers = arrayOf(1,2,3,4,5) //without data type initialization
    val words: Array<String> = arrayOf("Kotlin", "Java", "Python", "C++", "Ruby") //with data type
    val squares = Array(5) {i -> i * i} //using lambda function
    println(squares) //exactly the same as java
    
    var sq1 = squares[3]
    val num1 = numbers[0]
    var num2 = numbers[1]
    var w1 =  words[2]
    println(sq1)
    println("1st number: $num1")
    println("2nd number: $num2")
    numbers[0] = 10
    println("Modified 1st element: $num1")
    println(w1)
    
    println("1st for loop")
    for (num in numbers){
        println(num)
    }
    println("2nd for loop")
    var size = numbers.size - 1
    for (i in 0..size){
        println(numbers[i])
    }
    
    val matrix = arrayOf(arrayOf(1,2,3),arrayOf(4,5,6),arrayOf(7,8,9)) //2D array
    println(matrix[0][0])
    for (i in 0..2){
    print("[")
        for (j in 0..2){
            print(matrix[i][j])
        }
        print("]\n")
    }
    
    //Data type conversion(type conversion/casting)
    /*
     * toByte()
     * toShort()
     * toInt()
     * toLong()
     * toFloat()
     * toDouble()
     * toChar()
    */
    
    val x: Int = 100
    val y: Long = x.toLong() //if we don't use to .toLong() we will get an error because of type mismatch
    println(y)
    
    /*Types of casting:-
     * Safe Casting:- done using 'as?' keyword. It returns null if cast is not possible
     * Unsafe Casting:- done using 'as' keyword. It throws a  ClassCastException if cast is not possible
    */
    
    //Safe casting and unsafe casting problem
    println("\nSafe and unsafe casting program\n")
    val a = "hi"
    val b: String = a as String
    println("Unsafe cas result: $b")
//     val c: Int = a as Int
//     println("Will not print as it is not possible")
// 	   to tackle this we will get safe casting
    val c: Int? = a as? Int
    println("Safe casting: $c") // returns null
}
